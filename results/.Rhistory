## Write a function for the known PDF
plogist <- function(x)
{
frac <- exp(-x)/((1+exp(-x))^2)
return(frac)
}
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = freq_norm)) + geom_point() + geom_function(fun=plogist)
plt_11hist
plt_11comp
sum(samp_logist_hist$counts)
sum(samp_logist_df$freq_norm)
View(samp_logist_df)
hist(samp_logist,breaks=100)
samp_logist_hist$breaks
mids
sum(samp_logist_hist$counts)
sum(samp_logist_df$counts)
sum(samp_logist_df$freq_norm)
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = freq_norm)) + geom_point() + geom_function(fun=plogist)
## Generate samples using the above defined sampling strategy
n <- 1000000
samp_logist <- rlogist(n)
## Group Data into Bins and Store Counts and Normalized Counts
samp_logist_hist <- hist(samp_logist, breaks = 100, plot = FALSE)
mids = rep(0,length(samp_logist_hist$breaks)-1)
for (i in 1:length(samp_logist_hist$breaks)-1)
{
mids[i] = (samp_logist_hist$breaks[i] + samp_logist_hist$breaks[i+1])/2
}
samp_logist_df <- data.frame(mids = mids, counts = samp_logist_hist$counts)
samp_logist_df <- samp_logist_df %>% mutate(freq_norm = counts/n)
## Write a function for the known PDF
plogist <- function(x)
{
frac <- exp(-x)/((1+exp(-x))^2)
return(frac)
}
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = freq_norm)) + geom_point() + geom_function(fun=plogist)
plt_11comp
## Generate samples using the above defined sampling strategy
n <- 1000000
samp_logist <- rlogist(n)
## Group Data into Bins and Store Counts and Normalized Counts
samp_logist_hist <- hist(samp_logist, breaks = 100, plot = FALSE)
mids = rep(0,length(samp_logist_hist$breaks)-1)
for (i in 1:length(samp_logist_hist$breaks)-1)
{
mids[i] = (samp_logist_hist$breaks[i] + samp_logist_hist$breaks[i+1])/2
}
samp_logist_df <- data.frame(mids = mids, counts = samp_logist_hist$counts)
samp_logist_df <- samp_logist_df %>% mutate(freq_norm = counts/n)
## Write a function for the known PDF
plogist <- function(x)
{
frac <- exp(-x)/((1+exp(-x))^2)
return(frac)
}
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = freq_norm)) + geom_point() + geom_function(fun=plogist)
plt_11comp
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = freq_norm)) + geom_point() + geom_function(fun=plogist) + xlab("x") + ylab("freq")
plt_11comp
his(samp_logist,freq=TRUE)
hist(samp_logist,freq=TRUE)
hist(samp_logist)
hist(samp_logist,freq=FALSE)
hist(samp_logist,freq=FALSE)
samp_logist_df$mids
samp_logist_df$mids[30]
samp_logist_df$mids[40]
samp_logist_df$mids[25]
samp_logist_df$mids[35]
samp_logist_df$mids[36]
samp_logist_df$mids[33]
samp_logist_df$mids[31]
samp_logist_df$mids[32]
samp_logist_df$freq_norm[32]
samp_logist_df$counts[32]
this<-hist(samp_logist,freq=FALSE)
this$density
sum(this$density)
## Generate samples using the above defined sampling strategy
n <- 1000000
samp_logist <- rlogist(n)
## Group Data into Bins and Store Counts and Normalized Counts
samp_logist_hist <- hist(samp_logist, breaks = 100, freq=FALSE, plot = FALSE)
mids = rep(0,length(samp_logist_hist$breaks)-1)
for (i in 1:length(samp_logist_hist$breaks)-1)
{
mids[i] = (samp_logist_hist$breaks[i] + samp_logist_hist$breaks[i+1])/2
}
samp_logist_df <- data.frame(mids = mids, dens = samp_logist_hist$density)
#samp_logist_df <- samp_logist_df %>% mutate(freq_norm = counts/n)
## Write a function for the known PDF
plogist <- function(x)
{
frac <- exp(-x)/((1+exp(-x))^2)
return(frac)
}
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = dens)) + geom_point() + geom_function(fun=plogist) + xlab("x") + ylab("freq")
plt_11comp
## Group Data into Bins and Store Counts and Normalized Counts
samp_logist_hist <- hist(samp_logist, breaks = 100, freq=FALSE)
## Generate samples using the above defined sampling strategy
n <- 1000000
samp_logist <- rlogist(n)
## Group Data into Bins and Store Counts and Normalized Counts
samp_logist_hist <- hist(samp_logist, breaks = 100, freq=FALSE)
mids = rep(0,length(samp_logist_hist$breaks)-1)
for (i in 1:length(samp_logist_hist$breaks)-1)
{
mids[i] = (samp_logist_hist$breaks[i] + samp_logist_hist$breaks[i+1])/2
}
samp_logist_df <- data.frame(mids = mids, dens = samp_logist_hist$density)
#samp_logist_df <- samp_logist_df %>% mutate(freq_norm = counts/n)
## Write a function for the known PDF
plogist <- function(x)
{
frac <- exp(-x)/((1+exp(-x))^2)
return(frac)
}
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = dens)) + geom_point() + geom_function(fun=plogist) + xlab("x") + ylab("dens")
plt_11comp
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = dens)) + geom_point() + geom_function(fun=plogist,color="red") + xlab("x") + ylab("dens")
plt_11comp
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = dens)) + geom_point() + geom_function(fun=plogist,color="red") + xlab("x") + ylab("dens") + legend()
## Generate samples using the above defined sampling strategy
n <- 1000000
samp_logist <- rlogist(n)
## Group Data into Bins and Store Counts and Normalized Counts
samp_logist_hist <- hist(samp_logist, breaks = 100, freq=FALSE)
mids = rep(0,length(samp_logist_hist$breaks)-1)
for (i in 1:length(samp_logist_hist$breaks)-1)
{
mids[i] = (samp_logist_hist$breaks[i] + samp_logist_hist$breaks[i+1])/2
}
samp_logist_df <- data.frame(mids = mids, dens = samp_logist_hist$density)
#samp_logist_df <- samp_logist_df %>% mutate(freq_norm = counts/n)
## Write a function for the known PDF
plogist <- function(x)
{
frac <- exp(-x)/((1+exp(-x))^2)
return(frac)
}
##Plot comparison histogram
plt_11comp <- samp_logist_df %>% ggplot(aes(x=mids, y = dens)) + geom_point() + geom_function(fun=plogist,color="red") + xlab("x") + ylab("dens")
plt_11comp
print(plogist(3) - plogist(2))
plogist(3)
plogist(2)
print(abs(plogist(3) - plogist(2)))
clogist <- function(x)
{
frac <- e^(-x)/((1+e^-x)^2)
return(frac)
}
clogist(3) - clogist(2)
clogist <- function(x)
{
frac <- exp(-x)/((1+exp(-x))^2)
return(frac)
}
clogist(3) - clogist(2)
clogist(3)
clogist(2)
clogist <- function(x)
{
frac <- 1/(1+exp(-x))
return(frac)
}
clogist(3) - clogist(2)
for (i in 1:n)
{
is_in <- 0
if(samp_logist[i]<3 && samp_logist[i]>2)
isin <- is_in+1
}
prob_in <- is_in/n
print(prob_in)
samp_logist
for (i in 1:n)
{
is_in <- 0
if(samp_logist[i]<3 && samp_logist[i]>2)
is_in <- is_in+1
}
prob_in <- is_in/n
print(prob_in)
is_in <- 0
for (i in 1:n)
{
if(samp_logist[i]<3 && samp_logist[i]>2)
is_in <- is_in+1
}
prob_in <- is_in/n
print(prob_in)
dens_12 <- function(x)
{
f <- exp(-(x+1)) + (exp(1)-1)*exp(-exp(1)*x)
return(f)
}
plt_12_pdf <- ggplot(aes(x=seq(0,100,0.01))) + geom_function(fun=dens_f)
df_12 <- data.frame(x=seq(0,100,0.01))
plt_12_pdf <- df_12 %>% ggplot(aes(x=x)) + geom_function(fun=dens_f)
plt_12_pdf <- df_12 %>% ggplot(aes(x=x)) + geom_function(fun=dens_12)
plt_12_pdf
df_12 <- data.frame(x=seq(0,10,0.01))
plt_12_pdf <- df_12 %>% ggplot(aes(x=x)) + geom_function(fun=dens_12)
plt_12_pdf
df_12 <- data.frame(x=seq(0,5,0.01))
plt_12_pdf <- df_12 %>% ggplot(aes(x=x)) + geom_function(fun=dens_12)
plt_12_pdf
df_12 <- data.frame(x=seq(0.01,5,0.01))
plt_12_pdf <- df_12 %>% ggplot(aes(x=x)) + geom_function(fun=dens_12)
plt_12_pdf
exp(-1.01)
exp(-1.01)+(exp(1)-1)*exp(-exp(1)*0.01)
exp(-exp(1)*0.01)
*(exp(1)-1)
exp(-exp(1)*0.01)*(exp(1)-1)
data_midge = c(1.64, 1.7, 1.72,1.74, 1.82,1.82, 1.82,1.9,2.08)
s_0 <- 0.05
m_0 <- log(1.9) - (s_0^2)/2
s2_0 <- s_0^2
mc <- 100000
RVs_8b_log<-rnorm(mc, mean=m_0, sd = s_0)
RVs_8b <- exp(RVs_8b_log)
hist(RVs_8b)
sigma2 <- var(RVs_8b_log)
print(sigma2)
data_midge <- c(1.64, 1.7, 1.72,1.74, 1.82,1.82, 1.82,1.9,2.08)
log_data_midge <- log(data_midge)
sigma2 <- var(log_data_midge)
print(sigma2)
s_0 <- 0.02
m_0 <- log(1.9) - (s_0^2)/2
s2_0 <- s_0^2
mc <- 100000
RVs_8b_log<-rnorm(mc, mean=m_0, sd = s_0)
RVs_8b <- exp(RVs_8b_log)
hist(RVs_8b)
s_0 <- 0.03
m_0 <- log(1.9) - (s_0^2)/2
s2_0 <- s_0^2
mc <- 100000
RVs_8b_log<-rnorm(mc, mean=m_0, sd = s_0)
RVs_8b <- exp(RVs_8b_log)
hist(RVs_8b)
s_0 <- 0.04
m_0 <- log(1.9) - (s_0^2)/2
s2_0 <- s_0^2
mc <- 100000
RVs_8b_log<-rnorm(mc, mean=m_0, sd = s_0)
RVs_8b <- exp(RVs_8b_log)
hist(RVs_8b)
s_0 <- 0.05
m_0 <- log(1.9) - (s_0^2)/2
s2_0 <- s_0^2
mc <- 100000
RVs_8b_log<-rnorm(mc, mean=m_0, sd = s_0)
RVs_8b <- exp(RVs_8b_log)
hist(RVs_8b)
data_midge <- c(1.64, 1.7, 1.72,1.74, 1.82,1.82, 1.82,1.9,2.08)
log_data_midge <- log(data_midge)
sigma2 <- var(log_data_midge)
print(sigma2)
calc_m(m_0,s2_0,sigma2,logy)
calc_m <- function(m_0,s2_0,sigma2,logy)
{
n <- length(logy)
coeff <- 1/((1/s2_0)+(n/sigma2))
pr <- m_0/s2_0
dat <- sum(logy)/sigma2
m <- coeff*(pr + dat)
return(m)
}
m <- calc_m(m_0, s2_0, sigma2, log_data_midge)
print(m)
calc_m <- function(m_0,s2_0,sigma2,logy)
{
n <- length(logy)
coeff <- 1/((1/s2_0)+(n/sigma2))
pr <- m_0/s2_0
dat <- mean(logy)/sigma2
m <- coeff*(pr + dat)
return(m)
}
m <- calc_m(m_0, s2_0, sigma2, log_data_midge)
print(m)
calc_m <- function(m_0,s2_0,sigma2,logy)
{
n <- length(logy)
coeff <- 1/((1/s2_0)+(n/sigma2))
pr <- m_0/s2_0
dat <- sum(logy)/sigma2
m <- coeff*(pr + dat)
return(m)
}
m <- calc_m(m_0, s2_0, sigma2, log_data_midge)
print(m)
calc_m <- function(m_0,s2_0,sigma2,logy)
{
n <- length(logy)
coeff <- 1/((1/s2_0)+(n/sigma2))
pr <- m_0/s2_0
dat <- sum(logy)/sigma2
m <- coeff*(pr + dat)
return(m)
}
calc_v <- function(s2_0,sigma2,n)
{
v = ((1/s2_0)+(n/sigma2))^(-1)
}
m <- calc_m(m_0, s2_0, sigma2, log_data_midge)
v <- calc_v(s2_0,sigma2,length(log_data_midge))
print(paste("m=",m))
print(paste("v=",v))
?quantile
sqrt(v)
?rnorm
draws = 10000
plt_posterior <- function(m_0,s2_0,m,v,draws)
{
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
y <- c(yprior,ypost)
df_comp <- data.frame(type=c(rep("prior",draws),rep("post",draws)),y=y)
plt <- df_comp %>% ggplot(aes(x=y)) + geom_histogram()
}
draws = 10000
plt_posterior <- function(m_0,s2_0,m,v,draws)
{
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
y <- c(yprior,ypost)
df_comp <- data.frame(type=c(rep("prior",draws),rep("post",draws)),y=y)
plt <- df_comp %>% ggplot(aes(x=y)) + geom_histogram()
}
plt_8e <- plt_posterior(m_0,s2_0,m,v,draws)
plt_8e
draws = 10000
plt_posterior <- function(m_0,s2_0,m,v,draws)
{
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
y <- c(yprior,ypost)
df_comp <- data.frame(type=c(rep("prior",draws),rep("post",draws)),y=y)
plt <- df_comp %>% ggplot(aes(x=y,fill=type)) + geom_histogram()
}
plt_8e <- plt_posterior(m_0,s2_0,m,v,draws)
plt_8e
draws = 10000
plt_posterior <- function(m_0,s2_0,m,v,draws)
{
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
y <- c(yprior,ypost)
df_comp <- data.frame(type=c(rep("prior",draws),rep("post",draws)),y=y)
plt <- df_comp %>% ggplot(aes(x=y,fill=type)) + geom_density() #geom_histogram()
}
plt_8e <- plt_posterior(m_0,s2_0,m,v,draws)
plt_8e
draws = 100000
plt_posterior <- function(m_0,s2_0,m,v,draws)
{
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
y <- c(yprior,ypost)
df_comp <- data.frame(type=c(rep("prior",draws),rep("post",draws)),y=y)
plt <- df_comp %>% ggplot(aes(x=y,fill=type)) + geom_density() #geom_histogram()
}
plt_8e <- plt_posterior(m_0,s2_0,m,v,draws)
plt_8e
quantile(yprior)
## Generate draws from prior and posterior distributions
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
quantile(ypost)
?quantile
quantile(ypost,probs = seq(0.05))
quantile(ypost,probs = seq(0,1,0.05))
quantile(ypost,probs = seq(0.05,0.95,0.05))
quantile(ypost,probs = seq(0.05,0.95,0.9))
q<-quantile(ypost,probs = seq(0.05,0.95,0.9))
q[1]
q<-quantile(ypost,probs = seq(0.05,0.95,0.9),names=FALSE)
q
draws = 100000
plt_posterior <- function(m_0,s2_0,m,v,draws)
{
## Generate draws from prior and posterior distributions
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
CIprior <- quantile(yprior,probs = seq(0.05,0.95,0.9),names=FALSE)
CIpost <- quantile(ypost,probs = seq(0.05,0.95,0.9),names=FALSE)
y <- c(yprior,ypost)
df_comp <- data.frame(type=c(rep("prior",draws),rep("post",draws)),y=y)
plt <- df_comp %>% ggplot(aes(x=y,fill=type)) + geom_density() + geom_vline(CIprior) + geom_vline(CIpost) #geom_histogram()
}
plt_8e <- plt_posterior(m_0,s2_0,m,v,draws)
draws = 100000
plt_posterior <- function(m_0,s2_0,m,v,draws)
{
## Generate draws from prior and posterior distributions
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
CIprior <- quantile(yprior,probs = seq(0.05,0.95,0.9),names=FALSE)
CIpost <- quantile(ypost,probs = seq(0.05,0.95,0.9),names=FALSE)
y <- c(yprior,ypost)
df_comp <- data.frame(type=c(rep("prior",draws),rep("post",draws)),y=y)
plt <- df_comp %>% ggplot(aes(x=y,fill=type)) + geom_density() + geom_vline(CIprior) + geom_vline(CIpost) #geom_histogram()
}
plt_8e <- plt_posterior(m_0,s2_0,m,v,draws)
draws = 100000
plt_posterior <- function(m_0,s2_0,m,v,draws)
{
## Generate draws from prior and posterior distributions
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
CIprior <- quantile(yprior,probs = seq(0.05,0.95,0.9),names=FALSE)
CIpost <- quantile(ypost,probs = seq(0.05,0.95,0.9),names=FALSE)
y <- c(yprior,ypost)
df_comp <- data.frame(type=c(rep("prior",draws),rep("post",draws)),y=y)
plt <- df_comp %>% ggplot(aes(x=y,fill=type)) + geom_density() + geom_vline(xintercept=CIprior) + geom_vline(xintercept=CIpost) #geom_histogram()
}
plt_8e <- plt_posterior(m_0,s2_0,m,v,draws)
plt_8e
draws = 100000
plt_posterior <- function(m_0,s2_0,m,v,draws)
{
## Generate draws from prior and posterior distributions
logyprior <- rnorm(draws, mean=m_0, sd=sqrt(s2_0))
logypost <- rnorm(draws, mean=m, sd = sqrt(v))
yprior <- exp(logyprior)
ypost <- exp(logypost)
CIprior <- quantile(yprior,probs = seq(0.05,0.95,0.9),names=FALSE)
CIpost <- quantile(ypost,probs = seq(0.05,0.95,0.9),names=FALSE)
y <- c(yprior,ypost)
df_comp <- data.frame(type=c(rep("prior",draws),rep("post",draws)),y=y)
plt <- df_comp %>% ggplot(aes(x=y,fill=type)) + geom_density() + geom_vline(xintercept=CIprior,linetype="dashed", color="blue") + geom_vline(xintercept=CIpost,linetype="dashed", color = "red") #geom_histogram()
}
plt_8e <- plt_posterior(m_0,s2_0,m,v,draws)
plt_8e
################## Set up Workspace
setwd("C:/Users/awiec/GitHub_local/UWIIM/results")
setwd("../")
source("C:/Users/awiec/GitHub_local/UWIIM/results/analysis_scripts/WRR_Figs.R")
fig4
#Generate Fourth Sensitivity Analysis Figure (Box-Whisker Plot of Additional Analysis)
fig4 <- comp_bw(cs, vs_addtl,noavg=FALSE)
fig44
fig4
#Generate Fourth Sensitivity Analysis Figure (Box-Whisker Plot of Additional Analysis)
fig4 <- comp_bw(cs, vs_addtl,noavg=FALSE) + ylim(-1.25,3)
fig4
#Generate Fourth Sensitivity Analysis Figure (Box-Whisker Plot of Additional Analysis)
fig4 <- comp_bw(cs, vs_addtl,noavg=FALSE)
fig4
#Generate Fourth Sensitivity Analysis Figure (Box-Whisker Plot of Additional Analysis)
fig4 <- comp_bw(cs, vs_addtl,noavg=FALSE) + ylim(-1.25,5)
fig4
#Generate Fourth Sensitivity Analysis Figure (Box-Whisker Plot of Additional Analysis)
fig4 <- comp_bw(cs, vs_addtl,noavg=FALSE) + ylim(-1.25,8)
fig4
#Generate Fourth Sensitivity Analysis Figure (Box-Whisker Plot of Additional Analysis)
fig4 <- comp_bw(cs, vs_addtl,noavg=FALSE) + ylim(-1.25,10)
fig4
bw_df <- sens_avg_df(cs,vs_addtl)
View(bw_df)
bw_df_filt <- filter(bw_df, Dev > 3)
View(bw_df_filt)
#Generate Fourth Sensitivity Analysis Figure (Box-Whisker Plot of Additional Analysis)
fig4 <- comp_bw(cs, vs_addtl,noavg=FALSE)
fig4
#Generate Third Sensitivity Analysis Figure (Institutional Sensitivity)
wrr_fig3 <- fig3(badShocks=TRUE,badCutoff_PS=-0.6, noRel=TRUE, demRates=FALSE,
withHeat=TRUE,sepQC=FALSE)
wrr_fig3
source("C:/Users/awiec/GitHub_local/UWIIM/results/analysis_scripts/WRR_Figs.R")
source("C:/Users/awiec/GitHub_local/UWIIM/results/analysis_scripts/WRR_Figs.R")
#Generate the Second Sensitivity Analysis Figure (Institutional Costs)
wrr_fig2 <- fig2(badShocks=TRUE,badCutoff_PS=-0.6)
####Sensitivity Analysis Fig 1: Default CAP Magnitude Sensitivity####
#Generate First Sensitivity Analysis Figure (Default s variation)
wrr_fig1 <- plt_sens_CAP_default(cs,noavg=TRUE)
fig3
